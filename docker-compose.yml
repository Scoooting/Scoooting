services:
  db:
    image: postgres:16
    container_name: postgres_container
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres_pass
    ports:
      - 5432:5432
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  db-init:
    image: postgres:16
    container_name: db-init
    depends_on:
      db:
        condition: service_healthy
    environment:
      PGPASSWORD: postgres_pass
    command: >
      sh -c "
        psql -h db -U postgres -tc \"SELECT 1 FROM pg_database WHERE datname = 'users_db'\" | grep -q 1 || psql -h db -U postgres -c 'CREATE DATABASE users_db;' &&
        psql -h db -U postgres -tc \"SELECT 1 FROM pg_database WHERE datname = 'transports_db'\" | grep -q 1 || psql -h db -U postgres -c 'CREATE DATABASE transports_db;' &&
        psql -h db -U postgres -tc \"SELECT 1 FROM pg_database WHERE datname = 'rentals_db'\" | grep -q 1 || psql -h db -U postgres -c 'CREATE DATABASE rentals_db;' &&
        echo 'Databases created successfully!'
      "
    restart: "no"

  eureka-server:
    build: ./eureka
    container_name: eureka-server
    ports:
      - 8761:8761
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8761/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 8

  config-server:
    build: ./config-server
    container_name: config-server
    environment:
      - CONFIG_USERNAME=${CONFIG_USERNAME}
      - CONFIG_TOKEN=${CONFIG_TOKEN}
    ports:
      - 8888:8888
    depends_on:
      - eureka-server
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8888/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 8

  user-service:
    build: ./user-service
    container_name: user-service
    environment:
      - POSTGRES_URL=jdbc:postgresql://db:5432/users_db
      - CONFIG_SERVER_URI=${CONFIG_SERVER_URI}
      - JWT_ACCESS_DURATION=${JWT_ACCESS_DURATION:-900}
      - JWT_REFRESH_DURATION=${JWT_REFRESH_DURATION:-86400}
    ports: []
    depends_on:
      db-init:
        condition: service_completed_successfully
      config-server:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 8

  transport-service:
    build: ./transport-service
    container_name: transport-service
    environment:
      - POSTGRES_URL=jdbc:postgresql://db:5432/transports_db
      - R2DBC_URL=r2dbc:postgresql://db:5432/transports_db
      - CONFIG_SERVER_URI=${CONFIG_SERVER_URI}
      - POSTGRES_HOST=db
      - POSTGRES_DB=transports_db
    ports: []
    depends_on:
      db-init:
        condition: service_completed_successfully
      config-server:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 8

  rental-service:
    build: ./rental-service
    container_name: rental-service
    environment:
      - POSTGRES_URL=jdbc:postgresql://db:5432/rentals_db
      - CONFIG_SERVER_URI=${CONFIG_SERVER_URI}
    ports: []
    depends_on:
      db-init:
        condition: service_completed_successfully
      config-server:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 8

  api-gateway:
    build: ./api-gateway
    container_name: api-gateway
    ports:
      - 8080:8080
    depends_on:
      user-service:
        condition: service_healthy
      transport-service:
        condition: service_healthy
      rental-service:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 8

volumes:
  db_data:
