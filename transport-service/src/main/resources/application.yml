server:
  port: 8082

spring:
  application:
    name: transport-service
  config:
    import: optional:configserver:${CONFIG_SERVER_URI:http://config-server:8888}
  cloud:
    config:
      fail-fast: true
    loadbalancer:
      ribbon:
        enabled: false

  r2dbc:
    url: ${R2DBC_URL:r2dbc:postgresql://db:5432/transports_db}
    username: ${POSTGRES_USER:postgres}
    password: ${POSTGRES_PASSWORD:postgres_pass}
    pool:
      initial-size: 10
      max-size: 50

  sql:
    init:
      mode: always
      platform: postgresql
      schema-locations: classpath:schema.sql
      data-locations: classpath:data.sql
      continue-on-error: false

  datasource:
    driver-class-name: org.postgresql.Driver
    url: ${POSTGRES_URL:jdbc:postgresql://db:5432/transports_db}
    username: ${POSTGRES_USER:postgres}
    password: ${POSTGRES_PASSWORD:postgres_pass}

resilience4j.circuitbreaker:
  instances:
    userService:
      registerHealthIndicator: true
      slidingWindowSize: 10
      minimumNumberOfCalls: 3
      failureRateThreshold: 50
      waitDurationInOpenState: 10s
      permittedNumberOfCallsInHalfOpenState: 2
      automaticTransitionFromOpenToHalfOpenEnabled: true
      slidingWindowType: COUNT_BASED
      recordExceptions:
        - org.springframework.web.reactive.function.client.WebClientRequestException
        - org.springframework.web.reactive.function.client.WebClientResponseException
        - java.io.IOException
        - java.util.concurrent.TimeoutException
      ignoreExceptions:
        - org.scoooting.transport.exceptions.DataNotFoundException

management:
  endpoints:
    web:
      exposure:
        include: health,info,circuitbreakers,circuitbreakerevents
  health:
    circuitbreakers:
      enabled: true
  endpoint:
    health:
      show-details: always